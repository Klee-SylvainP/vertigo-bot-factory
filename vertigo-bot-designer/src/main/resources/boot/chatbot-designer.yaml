---
boot:
  params:
    locales: fr_FR
  plugins:
    - io.vertigo.core.plugins.resource.classpath.ClassPathResourceResolverPlugin: {}
    - io.vertigo.vega.plugins.webservice.servlet.WebAppContextParamPlugin: {}
modules:
  io.vertigo.commons.CommonsFeatures: # utilisation du module vertigo-commons
    features:
      - script:
      - cache:
    featuresConfig:
      - script.janino:
      - cache.memory:
  io.vertigo.database.DatabaseFeatures: # utilisation du module vertigo-database pour pouvoir utiliser une base de données
    features:
      - sql: # nous activons le support des bases de données SQL
      - timeseries:
    featuresConfig:
      - sql.datasource:
          classname: io.vertigo.database.impl.sql.vendor.postgresql.PostgreSqlDataBase
          source: java:/comp/env/jdbc/DataSource
      - timeseries.influxdb:
          host: http://analytica.part.klee.lan.net:8086
          user: anonymous
          password: anonymous
          dbNames: chatbot-test
  io.vertigo.dynamo.DynamoFeatures: # utilisation du module vertigo-dynamo
    features:
      - store: # activation du support du stockage des entités de notre modèle
      - kvStore: # activation du support du stockage clé/valeur (utilisé pour la conservation des état de écrans)
    featuresConfig:
      - store.data.sql: # nous utilisons un store de type SQL (avec notre base H2)
      - store.file.db:
          storeDtName: DtMediaFileInfo
      - store.file.fullFilesystem:
          name: temp
          path: ${java.io.tmpdir}/chatbotUploadedFiles/
          purgeDelayMinutes: 30
      - kvStore.delayedMemory:
          collections: protected-value
          timeToLiveSeconds: 3600
      - kvStore.berkeley:  # nous utilisons un stockage clé valeur avec la base de donnée BerkeleyDB
          collections: VViewContext;TTL=43200
          dbFilePath: ${java.io.tmpdir}/vertigo-ui/VViewContext
  io.vertigo.account.AccountFeatures:
    features:
      - security:
          userSessionClassName: io.vertigo.chatbot.designer.commons.DesignerUserSession
      - account:
      - authentication:
    featuresConfig:
       - account.store.store:
          userIdentityEntity: DtPerson
          groupIdentityEntity: DtGroups
          userAuthField: login
          #photoFileInfo:
          userToAccountMapping: 'id:perId, displayName:name, authToken:login'
          groupToGroupAccountMapping: 'id:grpId, displayName:name'
       - authentication.store:
          userCredentialEntity: DtPerson
          userLoginField: login
          userPasswordField: password
          userTokenIdField: login
  io.vertigo.vega.VegaFeatures:
    features:
      - webservices:
    featuresConfig:
      - webservices.apiPrefix:
          apiPrefix: /api
  
  io.vertigo.chatbot.commons.ChatbotCommonsFeatures: # utilisation de notre module commons

# utilisation de nos modules métier  
  io.vertigo.chatbot.designer.commons.DesignerCommonsFeatures:
  io.vertigo.chatbot.designer.admin.AdminFeatures:
  io.vertigo.chatbot.designer.builder.BuilderFeatures: 
  io.vertigo.chatbot.designer.analytics.AnalyticsFeatures: